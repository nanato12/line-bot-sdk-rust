/*
* Copyright 2023 nanato12
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/*
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * Generated by: https://openapi-generator.tech
 */

use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;
use std::pin::Pin;
use std::rc::Rc;

use futures::Future;
use hyper;

use super::request as __internal_request;
use super::{configuration, Error};

pub struct LineModuleAttachApiClient<C: hyper::client::connect::Connect>
where
    C: Clone + std::marker::Send + Sync + 'static,
{
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::connect::Connect> LineModuleAttachApiClient<C>
where
    C: Clone + std::marker::Send + Sync,
{
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> LineModuleAttachApiClient<C> {
        LineModuleAttachApiClient { configuration }
    }
}

pub trait LineModuleAttachApi {
    fn attach_module(
        &self,
        grant_type: Option<&str>,
        code: Option<&str>,
        redirect_uri: Option<&str>,
        code_verifier: Option<&str>,
        client_id: Option<&str>,
        client_secret: Option<&str>,
        region: Option<&str>,
        basic_search_id: Option<&str>,
        scope: Option<&str>,
        brand_type: Option<&str>,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::AttachModuleResponse, Error>>>>;
}

impl<C: hyper::client::connect::Connect> LineModuleAttachApi for LineModuleAttachApiClient<C>
where
    C: Clone + std::marker::Send + Sync,
{
    #[allow(unused_mut)]
    fn attach_module(
        &self,
        grant_type: Option<&str>,
        code: Option<&str>,
        redirect_uri: Option<&str>,
        code_verifier: Option<&str>,
        client_id: Option<&str>,
        client_secret: Option<&str>,
        region: Option<&str>,
        basic_search_id: Option<&str>,
        scope: Option<&str>,
        brand_type: Option<&str>,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::AttachModuleResponse, Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::POST,
            "/module/auth/v1/token".to_string(),
        )
        .with_auth(__internal_request::Auth::Basic);
        if let Some(param_value) = grant_type {
            req = req.with_form_param("grant_type".to_string(), param_value.to_string());
        }
        if let Some(param_value) = code {
            req = req.with_form_param("code".to_string(), param_value.to_string());
        }
        if let Some(param_value) = redirect_uri {
            req = req.with_form_param("redirect_uri".to_string(), param_value.to_string());
        }
        if let Some(param_value) = code_verifier {
            req = req.with_form_param("code_verifier".to_string(), param_value.to_string());
        }
        if let Some(param_value) = client_id {
            req = req.with_form_param("client_id".to_string(), param_value.to_string());
        }
        if let Some(param_value) = client_secret {
            req = req.with_form_param("client_secret".to_string(), param_value.to_string());
        }
        if let Some(param_value) = region {
            req = req.with_form_param("region".to_string(), param_value.to_string());
        }
        if let Some(param_value) = basic_search_id {
            req = req.with_form_param("basic_search_id".to_string(), param_value.to_string());
        }
        if let Some(param_value) = scope {
            req = req.with_form_param("scope".to_string(), param_value.to_string());
        }
        if let Some(param_value) = brand_type {
            req = req.with_form_param("brand_type".to_string(), param_value.to_string());
        }

        req.execute(self.configuration.borrow())
    }
}
