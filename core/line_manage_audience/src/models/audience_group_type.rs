/*
* Copyright (C) 2016 LINE Corp.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/*
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */

/// AudienceGroupType : Audience group type

/// Audience group type
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AudienceGroupType {
    #[serde(rename = "UPLOAD")]
    Upload,
    #[serde(rename = "CLICK")]
    Click,
    #[serde(rename = "IMP")]
    Imp,
    #[serde(rename = "CHAT_TAG")]
    ChatTag,
    #[serde(rename = "FRIEND_PATH")]
    FriendPath,
    #[serde(rename = "RESERVATION")]
    Reservation,
    #[serde(rename = "APP_EVENT")]
    AppEvent,
    #[serde(rename = "VIDEO_VIEW")]
    VideoView,
    #[serde(rename = "WEBTRAFFIC")]
    Webtraffic,
    #[serde(rename = "IMAGE_CLICK")]
    ImageClick,
    #[serde(rename = "RICHMENU_IMP")]
    RichmenuImp,
    #[serde(rename = "RICHMENU_CLICK")]
    RichmenuClick,

}

impl ToString for AudienceGroupType {
    fn to_string(&self) -> String {
        match self {
            Self::Upload => String::from("UPLOAD"),
            Self::Click => String::from("CLICK"),
            Self::Imp => String::from("IMP"),
            Self::ChatTag => String::from("CHAT_TAG"),
            Self::FriendPath => String::from("FRIEND_PATH"),
            Self::Reservation => String::from("RESERVATION"),
            Self::AppEvent => String::from("APP_EVENT"),
            Self::VideoView => String::from("VIDEO_VIEW"),
            Self::Webtraffic => String::from("WEBTRAFFIC"),
            Self::ImageClick => String::from("IMAGE_CLICK"),
            Self::RichmenuImp => String::from("RICHMENU_IMP"),
            Self::RichmenuClick => String::from("RICHMENU_CLICK"),
        }
    }
}

impl Default for AudienceGroupType {
    fn default() -> AudienceGroupType {
        Self::Upload
    }
}




