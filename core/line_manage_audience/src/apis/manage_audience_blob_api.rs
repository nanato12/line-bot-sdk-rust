/*
* Copyright (C) 2016 LINE Corp.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/*
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
use std::pin::Pin;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct ManageAudienceBlobApiClient<C: hyper::client::connect::Connect>
    where C: Clone + std::marker::Send + Sync + 'static {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::connect::Connect> ManageAudienceBlobApiClient<C>
    where C: Clone + std::marker::Send + Sync {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> ManageAudienceBlobApiClient<C> {
        ManageAudienceBlobApiClient {
            configuration,
        }
    }
}

pub trait ManageAudienceBlobApi {
    fn add_user_ids_to_audience(&self, file: std::path::PathBuf, audience_group_id: Option<i64>, upload_description: Option<&str>) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
    fn create_audience_for_uploading_user_ids(&self, file: std::path::PathBuf, description: Option<&str>, is_ifa_audience: Option<bool>, upload_description: Option<&str>) -> Pin<Box<dyn Future<Output = Result<crate::models::CreateAudienceGroupResponse, Error>>>>;
}

impl<C: hyper::client::connect::Connect>ManageAudienceBlobApi for ManageAudienceBlobApiClient<C>
    where C: Clone + std::marker::Send + Sync {
    #[allow(unused_mut)]
    fn add_user_ids_to_audience(&self, file: std::path::PathBuf, audience_group_id: Option<i64>, upload_description: Option<&str>) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::PUT, "/v2/bot/audienceGroup/upload/byFile".to_string())
        ;
        if let Some(param_value) = audience_group_id {
            req = req.with_form_param("audienceGroupId".to_string(), param_value.to_string());
        }
        if let Some(param_value) = upload_description {
            req = req.with_form_param("uploadDescription".to_string(), param_value.to_string());
        }
        req = req.with_form_param("file".to_string(), unimplemented!());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn create_audience_for_uploading_user_ids(&self, file: std::path::PathBuf, description: Option<&str>, is_ifa_audience: Option<bool>, upload_description: Option<&str>) -> Pin<Box<dyn Future<Output = Result<crate::models::CreateAudienceGroupResponse, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/v2/bot/audienceGroup/upload/byFile".to_string())
        ;
        if let Some(param_value) = description {
            req = req.with_form_param("description".to_string(), param_value.to_string());
        }
        if let Some(param_value) = is_ifa_audience {
            req = req.with_form_param("isIfaAudience".to_string(), param_value.to_string());
        }
        if let Some(param_value) = upload_description {
            req = req.with_form_param("uploadDescription".to_string(), param_value.to_string());
        }
        req = req.with_form_param("file".to_string(), unimplemented!());

        req.execute(self.configuration.borrow())
    }

}
