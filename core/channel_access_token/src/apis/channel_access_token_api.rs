/*
* Copyright 2023 nanato12
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/*
 * Channel Access Token API
 *
 * This document describes Channel Access Token API.
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * Generated by: https://openapi-generator.tech
 */

use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;
use std::pin::Pin;
use std::rc::Rc;

use futures::Future;
use hyper;

use super::request as __internal_request;
use super::{configuration, Error};

pub struct ChannelAccessTokenApiClient<C: hyper::client::connect::Connect>
where
    C: Clone + std::marker::Send + Sync + 'static,
{
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::connect::Connect> ChannelAccessTokenApiClient<C>
where
    C: Clone + std::marker::Send + Sync,
{
    pub fn new(
        configuration: Rc<configuration::Configuration<C>>,
    ) -> ChannelAccessTokenApiClient<C> {
        ChannelAccessTokenApiClient { configuration }
    }
}

pub trait ChannelAccessTokenApi {
    fn gets_all_valid_channel_access_token_key_ids(
        &self,
        client_assertion_type: &str,
        client_assertion: &str,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::ChannelAccessTokenKeyIdsResponse, Error>>>>;
    fn issue_channel_token(
        &self,
        grant_type: Option<&str>,
        client_id: Option<&str>,
        client_secret: Option<&str>,
    ) -> Pin<
        Box<
            dyn Future<
                Output = Result<crate::models::IssueShortLivedChannelAccessTokenResponse, Error>,
            >,
        >,
    >;
    fn issue_channel_token_by_jwt(
        &self,
        grant_type: Option<&str>,
        client_assertion_type: Option<&str>,
        client_assertion: Option<&str>,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::IssueChannelAccessTokenResponse, Error>>>>;
    fn issue_stateless_channel_token(
        &self,
        grant_type: Option<&str>,
        client_assertion_type: Option<&str>,
        client_assertion: Option<&str>,
        client_id: Option<&str>,
        client_secret: Option<&str>,
    ) -> Pin<
        Box<
            dyn Future<
                Output = Result<crate::models::IssueStatelessChannelAccessTokenResponse, Error>,
            >,
        >,
    >;
    fn revoke_channel_token(
        &self,
        access_token: Option<&str>,
    ) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
    fn revoke_channel_token_by_jwt(
        &self,
        client_id: Option<&str>,
        client_secret: Option<&str>,
        access_token: Option<&str>,
    ) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
    fn verify_channel_token(
        &self,
        access_token: Option<&str>,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::VerifyChannelAccessTokenResponse, Error>>>>;
    fn verify_channel_token_by_jwt(
        &self,
        access_token: &str,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::VerifyChannelAccessTokenResponse, Error>>>>;
}

impl<C: hyper::client::connect::Connect> ChannelAccessTokenApi for ChannelAccessTokenApiClient<C>
where
    C: Clone + std::marker::Send + Sync,
{
    #[allow(unused_mut)]
    fn gets_all_valid_channel_access_token_key_ids(
        &self,
        client_assertion_type: &str,
        client_assertion: &str,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::ChannelAccessTokenKeyIdsResponse, Error>>>>
    {
        let mut req = __internal_request::Request::new(
            hyper::Method::GET,
            "/oauth2/v2.1/tokens/kid".to_string(),
        );
        req = req.with_query_param(
            "client_assertion_type".to_string(),
            client_assertion_type.to_string(),
        );
        req = req.with_query_param("client_assertion".to_string(), client_assertion.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn issue_channel_token(
        &self,
        grant_type: Option<&str>,
        client_id: Option<&str>,
        client_secret: Option<&str>,
    ) -> Pin<
        Box<
            dyn Future<
                Output = Result<crate::models::IssueShortLivedChannelAccessTokenResponse, Error>,
            >,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::POST,
            "/v2/oauth/accessToken".to_string(),
        );
        if let Some(param_value) = grant_type {
            req = req.with_form_param("grant_type".to_string(), param_value.to_string());
        }
        if let Some(param_value) = client_id {
            req = req.with_form_param("client_id".to_string(), param_value.to_string());
        }
        if let Some(param_value) = client_secret {
            req = req.with_form_param("client_secret".to_string(), param_value.to_string());
        }

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn issue_channel_token_by_jwt(
        &self,
        grant_type: Option<&str>,
        client_assertion_type: Option<&str>,
        client_assertion: Option<&str>,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::IssueChannelAccessTokenResponse, Error>>>>
    {
        let mut req =
            __internal_request::Request::new(hyper::Method::POST, "/oauth2/v2.1/token".to_string());
        if let Some(param_value) = grant_type {
            req = req.with_form_param("grant_type".to_string(), param_value.to_string());
        }
        if let Some(param_value) = client_assertion_type {
            req = req.with_form_param("client_assertion_type".to_string(), param_value.to_string());
        }
        if let Some(param_value) = client_assertion {
            req = req.with_form_param("client_assertion".to_string(), param_value.to_string());
        }

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn issue_stateless_channel_token(
        &self,
        grant_type: Option<&str>,
        client_assertion_type: Option<&str>,
        client_assertion: Option<&str>,
        client_id: Option<&str>,
        client_secret: Option<&str>,
    ) -> Pin<
        Box<
            dyn Future<
                Output = Result<crate::models::IssueStatelessChannelAccessTokenResponse, Error>,
            >,
        >,
    > {
        let mut req =
            __internal_request::Request::new(hyper::Method::POST, "/oauth2/v3/token".to_string());
        if let Some(param_value) = grant_type {
            req = req.with_form_param("grant_type".to_string(), param_value.to_string());
        }
        if let Some(param_value) = client_assertion_type {
            req = req.with_form_param("client_assertion_type".to_string(), param_value.to_string());
        }
        if let Some(param_value) = client_assertion {
            req = req.with_form_param("client_assertion".to_string(), param_value.to_string());
        }
        if let Some(param_value) = client_id {
            req = req.with_form_param("client_id".to_string(), param_value.to_string());
        }
        if let Some(param_value) = client_secret {
            req = req.with_form_param("client_secret".to_string(), param_value.to_string());
        }

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn revoke_channel_token(
        &self,
        access_token: Option<&str>,
    ) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req =
            __internal_request::Request::new(hyper::Method::POST, "/v2/oauth/revoke".to_string());
        if let Some(param_value) = access_token {
            req = req.with_form_param("access_token".to_string(), param_value.to_string());
        }
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn revoke_channel_token_by_jwt(
        &self,
        client_id: Option<&str>,
        client_secret: Option<&str>,
        access_token: Option<&str>,
    ) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::POST,
            "/oauth2/v2.1/revoke".to_string(),
        );
        if let Some(param_value) = client_id {
            req = req.with_form_param("client_id".to_string(), param_value.to_string());
        }
        if let Some(param_value) = client_secret {
            req = req.with_form_param("client_secret".to_string(), param_value.to_string());
        }
        if let Some(param_value) = access_token {
            req = req.with_form_param("access_token".to_string(), param_value.to_string());
        }
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn verify_channel_token(
        &self,
        access_token: Option<&str>,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::VerifyChannelAccessTokenResponse, Error>>>>
    {
        let mut req =
            __internal_request::Request::new(hyper::Method::POST, "/v2/oauth/verify".to_string());
        if let Some(param_value) = access_token {
            req = req.with_form_param("access_token".to_string(), param_value.to_string());
        }

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn verify_channel_token_by_jwt(
        &self,
        access_token: &str,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::VerifyChannelAccessTokenResponse, Error>>>>
    {
        let mut req =
            __internal_request::Request::new(hyper::Method::GET, "/oauth2/v2.1/verify".to_string());
        req = req.with_query_param("access_token".to_string(), access_token.to_string());

        req.execute(self.configuration.borrow())
    }
}
