/*
* Copyright (C) 2016 LINE Corp.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/*
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.2
 *
 * Generated by: https://openapi-generator.tech
 */

use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;
use std::pin::Pin;
use std::rc::Rc;

use futures::Future;
use hyper;

use super::request as __internal_request;
use super::{configuration, Error};

pub struct MessagingApiApiClient<C: hyper::client::connect::Connect>
where
    C: Clone + std::marker::Send + Sync + 'static,
{
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::connect::Connect> MessagingApiApiClient<C>
where
    C: Clone + std::marker::Send + Sync,
{
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> MessagingApiApiClient<C> {
        MessagingApiApiClient { configuration }
    }
}

pub trait MessagingApiApi {
    fn audience_match(
        &self,
        audience_match_messages_request: crate::models::AudienceMatchMessagesRequest,
    ) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
    fn broadcast(
        &self,
        broadcast_request: crate::models::BroadcastRequest,
        x_line_retry_key: Option<&str>,
    ) -> Pin<Box<dyn Future<Output = Result<serde_json::Value, Error>>>>;
    fn cancel_default_rich_menu(&self) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
    fn create_rich_menu(
        &self,
        rich_menu_request: crate::models::RichMenuRequest,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::RichMenuIdResponse, Error>>>>;
    fn create_rich_menu_alias(
        &self,
        create_rich_menu_alias_request: crate::models::CreateRichMenuAliasRequest,
    ) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
    fn delete_rich_menu(
        &self,
        rich_menu_id: &str,
    ) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
    fn delete_rich_menu_alias(
        &self,
        rich_menu_alias_id: &str,
    ) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
    fn get_ad_phone_message_statistics(
        &self,
        date: &str,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::NumberOfMessagesResponse, Error>>>>;
    fn get_aggregation_unit_name_list(
        &self,
        limit: Option<&str>,
        start: Option<&str>,
    ) -> Pin<
        Box<dyn Future<Output = Result<crate::models::GetAggregationUnitNameListResponse, Error>>>,
    >;
    fn get_aggregation_unit_usage(
        &self,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::GetAggregationUnitUsageResponse, Error>>>>;
    fn get_bot_info(
        &self,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::BotInfoResponse, Error>>>>;
    fn get_default_rich_menu_id(
        &self,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::RichMenuIdResponse, Error>>>>;
    fn get_followers(
        &self,
        start: Option<&str>,
        limit: Option<i32>,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::GetFollowersResponse, Error>>>>;
    fn get_group_member_count(
        &self,
        group_id: &str,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::GroupMemberCountResponse, Error>>>>;
    fn get_group_member_profile(
        &self,
        group_id: &str,
        user_id: &str,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::GroupUserProfileResponse, Error>>>>;
    fn get_group_members_ids(
        &self,
        group_id: &str,
        start: Option<&str>,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::MembersIdsResponse, Error>>>>;
    fn get_group_summary(
        &self,
        group_id: &str,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::GroupSummaryResponse, Error>>>>;
    fn get_message_quota(
        &self,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::MessageQuotaResponse, Error>>>>;
    fn get_message_quota_consumption(
        &self,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::QuotaConsumptionResponse, Error>>>>;
    fn get_narrowcast_progress(
        &self,
        request_id: &str,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::NarrowcastProgressResponse, Error>>>>;
    fn get_number_of_sent_broadcast_messages(
        &self,
        date: &str,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::NumberOfMessagesResponse, Error>>>>;
    fn get_number_of_sent_multicast_messages(
        &self,
        date: &str,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::NumberOfMessagesResponse, Error>>>>;
    fn get_number_of_sent_push_messages(
        &self,
        date: &str,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::NumberOfMessagesResponse, Error>>>>;
    fn get_number_of_sent_reply_messages(
        &self,
        date: &str,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::NumberOfMessagesResponse, Error>>>>;
    fn get_pnp_message_statistics(
        &self,
        date: &str,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::NumberOfMessagesResponse, Error>>>>;
    fn get_profile(
        &self,
        user_id: &str,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::UserProfileResponse, Error>>>>;
    fn get_rich_menu(
        &self,
        rich_menu_id: &str,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::RichMenuResponse, Error>>>>;
    fn get_rich_menu_alias(
        &self,
        rich_menu_alias_id: &str,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::RichMenuAliasResponse, Error>>>>;
    fn get_rich_menu_alias_list(
        &self,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::RichMenuAliasListResponse, Error>>>>;
    fn get_rich_menu_batch_progress(
        &self,
        request_id: &str,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::RichMenuBatchProgressResponse, Error>>>>;
    fn get_rich_menu_id_of_user(
        &self,
        user_id: &str,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::RichMenuIdResponse, Error>>>>;
    fn get_rich_menu_list(
        &self,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::RichMenuListResponse, Error>>>>;
    fn get_room_member_count(
        &self,
        room_id: &str,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::RoomMemberCountResponse, Error>>>>;
    fn get_room_member_profile(
        &self,
        room_id: &str,
        user_id: &str,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::RoomUserProfileResponse, Error>>>>;
    fn get_room_members_ids(
        &self,
        room_id: &str,
        start: Option<&str>,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::MembersIdsResponse, Error>>>>;
    fn get_webhook_endpoint(
        &self,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::GetWebhookEndpointResponse, Error>>>>;
    fn issue_link_token(
        &self,
        user_id: &str,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::IssueLinkTokenResponse, Error>>>>;
    fn leave_group(&self, group_id: &str) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
    fn leave_room(&self, room_id: &str) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
    fn link_rich_menu_id_to_user(
        &self,
        user_id: &str,
        rich_menu_id: &str,
    ) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
    fn link_rich_menu_id_to_users(
        &self,
        rich_menu_bulk_link_request: crate::models::RichMenuBulkLinkRequest,
    ) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
    fn mark_messages_as_read(
        &self,
        mark_messages_as_read_request: crate::models::MarkMessagesAsReadRequest,
    ) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
    fn multicast(
        &self,
        multicast_request: crate::models::MulticastRequest,
        x_line_retry_key: Option<&str>,
    ) -> Pin<Box<dyn Future<Output = Result<serde_json::Value, Error>>>>;
    fn narrowcast(
        &self,
        narrowcast_request: crate::models::NarrowcastRequest,
        x_line_retry_key: Option<&str>,
    ) -> Pin<Box<dyn Future<Output = Result<serde_json::Value, Error>>>>;
    fn push_message(
        &self,
        push_message_request: crate::models::PushMessageRequest,
        x_line_retry_key: Option<&str>,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::PushMessageResponse, Error>>>>;
    fn push_messages_by_phone(
        &self,
        pnp_messages_request: crate::models::PnpMessagesRequest,
        x_line_delivery_tag: Option<&str>,
    ) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
    fn reply_message(
        &self,
        reply_message_request: crate::models::ReplyMessageRequest,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::ReplyMessageResponse, Error>>>>;
    fn rich_menu_batch(
        &self,
        rich_menu_batch_request: crate::models::RichMenuBatchRequest,
    ) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
    fn set_default_rich_menu(
        &self,
        rich_menu_id: &str,
    ) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
    fn set_webhook_endpoint(
        &self,
        set_webhook_endpoint_request: crate::models::SetWebhookEndpointRequest,
    ) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
    fn test_webhook_endpoint(
        &self,
        test_webhook_endpoint_request: Option<crate::models::TestWebhookEndpointRequest>,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::TestWebhookEndpointResponse, Error>>>>;
    fn unlink_rich_menu_id_from_user(
        &self,
        user_id: &str,
    ) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
    fn unlink_rich_menu_id_from_users(
        &self,
        rich_menu_bulk_unlink_request: crate::models::RichMenuBulkUnlinkRequest,
    ) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
    fn update_rich_menu_alias(
        &self,
        rich_menu_alias_id: &str,
        update_rich_menu_alias_request: crate::models::UpdateRichMenuAliasRequest,
    ) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
    fn validate_broadcast(
        &self,
        validate_message_request: crate::models::ValidateMessageRequest,
    ) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
    fn validate_multicast(
        &self,
        validate_message_request: crate::models::ValidateMessageRequest,
    ) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
    fn validate_narrowcast(
        &self,
        validate_message_request: crate::models::ValidateMessageRequest,
    ) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
    fn validate_push(
        &self,
        validate_message_request: crate::models::ValidateMessageRequest,
    ) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
    fn validate_reply(
        &self,
        validate_message_request: crate::models::ValidateMessageRequest,
    ) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
    fn validate_rich_menu_batch_request(
        &self,
        rich_menu_batch_request: crate::models::RichMenuBatchRequest,
    ) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
    fn validate_rich_menu_object(
        &self,
        rich_menu_request: crate::models::RichMenuRequest,
    ) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
}

impl<C: hyper::client::connect::Connect> MessagingApiApi for MessagingApiApiClient<C>
where
    C: Clone + std::marker::Send + Sync,
{
    #[allow(unused_mut)]
    fn audience_match(
        &self,
        audience_match_messages_request: crate::models::AudienceMatchMessagesRequest,
    ) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::POST,
            "/bot/ad/multicast/phone".to_string(),
        );
        req = req.with_body_param(audience_match_messages_request);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn broadcast(
        &self,
        broadcast_request: crate::models::BroadcastRequest,
        x_line_retry_key: Option<&str>,
    ) -> Pin<Box<dyn Future<Output = Result<serde_json::Value, Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::POST,
            "/v2/bot/message/broadcast".to_string(),
        );
        if let Some(param_value) = x_line_retry_key {
            req = req.with_header_param("X-Line-Retry-Key".to_string(), param_value.to_string());
        }
        req = req.with_body_param(broadcast_request);

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn cancel_default_rich_menu(&self) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::DELETE,
            "/v2/bot/user/all/richmenu".to_string(),
        );
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn create_rich_menu(
        &self,
        rich_menu_request: crate::models::RichMenuRequest,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::RichMenuIdResponse, Error>>>> {
        let mut req =
            __internal_request::Request::new(hyper::Method::POST, "/v2/bot/richmenu".to_string());
        req = req.with_body_param(rich_menu_request);

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn create_rich_menu_alias(
        &self,
        create_rich_menu_alias_request: crate::models::CreateRichMenuAliasRequest,
    ) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::POST,
            "/v2/bot/richmenu/alias".to_string(),
        );
        req = req.with_body_param(create_rich_menu_alias_request);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn delete_rich_menu(
        &self,
        rich_menu_id: &str,
    ) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::DELETE,
            "/v2/bot/richmenu/{richMenuId}".to_string(),
        );
        req = req.with_path_param("richMenuId".to_string(), rich_menu_id.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn delete_rich_menu_alias(
        &self,
        rich_menu_alias_id: &str,
    ) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::DELETE,
            "/v2/bot/richmenu/alias/{richMenuAliasId}".to_string(),
        );
        req = req.with_path_param(
            "richMenuAliasId".to_string(),
            rich_menu_alias_id.to_string(),
        );
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_ad_phone_message_statistics(
        &self,
        date: &str,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::NumberOfMessagesResponse, Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::GET,
            "/v2/bot/message/delivery/ad_phone".to_string(),
        );
        req = req.with_query_param("date".to_string(), date.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_aggregation_unit_name_list(
        &self,
        limit: Option<&str>,
        start: Option<&str>,
    ) -> Pin<
        Box<dyn Future<Output = Result<crate::models::GetAggregationUnitNameListResponse, Error>>>,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::GET,
            "/v2/bot/message/aggregation/list".to_string(),
        );
        if let Some(ref s) = limit {
            let query_value = s.to_string();
            req = req.with_query_param("limit".to_string(), query_value);
        }
        if let Some(ref s) = start {
            let query_value = s.to_string();
            req = req.with_query_param("start".to_string(), query_value);
        }

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_aggregation_unit_usage(
        &self,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::GetAggregationUnitUsageResponse, Error>>>>
    {
        let mut req = __internal_request::Request::new(
            hyper::Method::GET,
            "/v2/bot/message/aggregation/info".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_bot_info(
        &self,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::BotInfoResponse, Error>>>> {
        let mut req =
            __internal_request::Request::new(hyper::Method::GET, "/v2/bot/info".to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_default_rich_menu_id(
        &self,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::RichMenuIdResponse, Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::GET,
            "/v2/bot/user/all/richmenu".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_followers(
        &self,
        start: Option<&str>,
        limit: Option<i32>,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::GetFollowersResponse, Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::GET,
            "/v2/bot/followers/ids".to_string(),
        );
        if let Some(ref s) = start {
            let query_value = s.to_string();
            req = req.with_query_param("start".to_string(), query_value);
        }
        if let Some(ref s) = limit {
            let query_value = s.to_string();
            req = req.with_query_param("limit".to_string(), query_value);
        }

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_group_member_count(
        &self,
        group_id: &str,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::GroupMemberCountResponse, Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::GET,
            "/v2/bot/group/{groupId}/members/count".to_string(),
        );
        req = req.with_path_param("groupId".to_string(), group_id.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_group_member_profile(
        &self,
        group_id: &str,
        user_id: &str,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::GroupUserProfileResponse, Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::GET,
            "/v2/bot/group/{groupId}/member/{userId}".to_string(),
        );
        req = req.with_path_param("groupId".to_string(), group_id.to_string());
        req = req.with_path_param("userId".to_string(), user_id.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_group_members_ids(
        &self,
        group_id: &str,
        start: Option<&str>,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::MembersIdsResponse, Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::GET,
            "/v2/bot/group/{groupId}/members/ids".to_string(),
        );
        if let Some(ref s) = start {
            let query_value = s.to_string();
            req = req.with_query_param("start".to_string(), query_value);
        }
        req = req.with_path_param("groupId".to_string(), group_id.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_group_summary(
        &self,
        group_id: &str,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::GroupSummaryResponse, Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::GET,
            "/v2/bot/group/{groupId}/summary".to_string(),
        );
        req = req.with_path_param("groupId".to_string(), group_id.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_message_quota(
        &self,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::MessageQuotaResponse, Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::GET,
            "/v2/bot/message/quota".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_message_quota_consumption(
        &self,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::QuotaConsumptionResponse, Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::GET,
            "/v2/bot/message/quota/consumption".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_narrowcast_progress(
        &self,
        request_id: &str,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::NarrowcastProgressResponse, Error>>>>
    {
        let mut req = __internal_request::Request::new(
            hyper::Method::GET,
            "/v2/bot/message/progress/narrowcast".to_string(),
        );
        req = req.with_query_param("requestId".to_string(), request_id.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_number_of_sent_broadcast_messages(
        &self,
        date: &str,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::NumberOfMessagesResponse, Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::GET,
            "/v2/bot/message/delivery/broadcast".to_string(),
        );
        req = req.with_query_param("date".to_string(), date.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_number_of_sent_multicast_messages(
        &self,
        date: &str,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::NumberOfMessagesResponse, Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::GET,
            "/v2/bot/message/delivery/multicast".to_string(),
        );
        req = req.with_query_param("date".to_string(), date.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_number_of_sent_push_messages(
        &self,
        date: &str,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::NumberOfMessagesResponse, Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::GET,
            "/v2/bot/message/delivery/push".to_string(),
        );
        req = req.with_query_param("date".to_string(), date.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_number_of_sent_reply_messages(
        &self,
        date: &str,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::NumberOfMessagesResponse, Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::GET,
            "/v2/bot/message/delivery/reply".to_string(),
        );
        req = req.with_query_param("date".to_string(), date.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_pnp_message_statistics(
        &self,
        date: &str,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::NumberOfMessagesResponse, Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::GET,
            "/v2/bot/message/delivery/pnp".to_string(),
        );
        req = req.with_query_param("date".to_string(), date.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_profile(
        &self,
        user_id: &str,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::UserProfileResponse, Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::GET,
            "/v2/bot/profile/{userId}".to_string(),
        );
        req = req.with_path_param("userId".to_string(), user_id.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_rich_menu(
        &self,
        rich_menu_id: &str,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::RichMenuResponse, Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::GET,
            "/v2/bot/richmenu/{richMenuId}".to_string(),
        );
        req = req.with_path_param("richMenuId".to_string(), rich_menu_id.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_rich_menu_alias(
        &self,
        rich_menu_alias_id: &str,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::RichMenuAliasResponse, Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::GET,
            "/v2/bot/richmenu/alias/{richMenuAliasId}".to_string(),
        );
        req = req.with_path_param(
            "richMenuAliasId".to_string(),
            rich_menu_alias_id.to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_rich_menu_alias_list(
        &self,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::RichMenuAliasListResponse, Error>>>>
    {
        let mut req = __internal_request::Request::new(
            hyper::Method::GET,
            "/v2/bot/richmenu/alias/list".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_rich_menu_batch_progress(
        &self,
        request_id: &str,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::RichMenuBatchProgressResponse, Error>>>>
    {
        let mut req = __internal_request::Request::new(
            hyper::Method::GET,
            "/v2/bot/richmenu/progress/batch".to_string(),
        );
        req = req.with_query_param("requestId".to_string(), request_id.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_rich_menu_id_of_user(
        &self,
        user_id: &str,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::RichMenuIdResponse, Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::GET,
            "/v2/bot/user/{userId}/richmenu".to_string(),
        );
        req = req.with_path_param("userId".to_string(), user_id.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_rich_menu_list(
        &self,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::RichMenuListResponse, Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::GET,
            "/v2/bot/richmenu/list".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_room_member_count(
        &self,
        room_id: &str,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::RoomMemberCountResponse, Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::GET,
            "/v2/bot/room/{roomId}/members/count".to_string(),
        );
        req = req.with_path_param("roomId".to_string(), room_id.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_room_member_profile(
        &self,
        room_id: &str,
        user_id: &str,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::RoomUserProfileResponse, Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::GET,
            "/v2/bot/room/{roomId}/member/{userId}".to_string(),
        );
        req = req.with_path_param("roomId".to_string(), room_id.to_string());
        req = req.with_path_param("userId".to_string(), user_id.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_room_members_ids(
        &self,
        room_id: &str,
        start: Option<&str>,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::MembersIdsResponse, Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::GET,
            "/v2/bot/room/{roomId}/members/ids".to_string(),
        );
        if let Some(ref s) = start {
            let query_value = s.to_string();
            req = req.with_query_param("start".to_string(), query_value);
        }
        req = req.with_path_param("roomId".to_string(), room_id.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_webhook_endpoint(
        &self,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::GetWebhookEndpointResponse, Error>>>>
    {
        let mut req = __internal_request::Request::new(
            hyper::Method::GET,
            "/v2/bot/channel/webhook/endpoint".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn issue_link_token(
        &self,
        user_id: &str,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::IssueLinkTokenResponse, Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::POST,
            "/v2/bot/user/{userId}/linkToken".to_string(),
        );
        req = req.with_path_param("userId".to_string(), user_id.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn leave_group(&self, group_id: &str) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::POST,
            "/v2/bot/group/{groupId}/leave".to_string(),
        );
        req = req.with_path_param("groupId".to_string(), group_id.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn leave_room(&self, room_id: &str) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::POST,
            "/v2/bot/room/{roomId}/leave".to_string(),
        );
        req = req.with_path_param("roomId".to_string(), room_id.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn link_rich_menu_id_to_user(
        &self,
        user_id: &str,
        rich_menu_id: &str,
    ) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::POST,
            "/v2/bot/user/{userId}/richmenu/{richMenuId}".to_string(),
        );
        req = req.with_path_param("userId".to_string(), user_id.to_string());
        req = req.with_path_param("richMenuId".to_string(), rich_menu_id.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn link_rich_menu_id_to_users(
        &self,
        rich_menu_bulk_link_request: crate::models::RichMenuBulkLinkRequest,
    ) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::POST,
            "/v2/bot/richmenu/bulk/link".to_string(),
        );
        req = req.with_body_param(rich_menu_bulk_link_request);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn mark_messages_as_read(
        &self,
        mark_messages_as_read_request: crate::models::MarkMessagesAsReadRequest,
    ) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::POST,
            "/v2/bot/message/markAsRead".to_string(),
        );
        req = req.with_body_param(mark_messages_as_read_request);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn multicast(
        &self,
        multicast_request: crate::models::MulticastRequest,
        x_line_retry_key: Option<&str>,
    ) -> Pin<Box<dyn Future<Output = Result<serde_json::Value, Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::POST,
            "/v2/bot/message/multicast".to_string(),
        );
        if let Some(param_value) = x_line_retry_key {
            req = req.with_header_param("X-Line-Retry-Key".to_string(), param_value.to_string());
        }
        req = req.with_body_param(multicast_request);

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn narrowcast(
        &self,
        narrowcast_request: crate::models::NarrowcastRequest,
        x_line_retry_key: Option<&str>,
    ) -> Pin<Box<dyn Future<Output = Result<serde_json::Value, Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::POST,
            "/v2/bot/message/narrowcast".to_string(),
        );
        if let Some(param_value) = x_line_retry_key {
            req = req.with_header_param("X-Line-Retry-Key".to_string(), param_value.to_string());
        }
        req = req.with_body_param(narrowcast_request);

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn push_message(
        &self,
        push_message_request: crate::models::PushMessageRequest,
        x_line_retry_key: Option<&str>,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::PushMessageResponse, Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::POST,
            "/v2/bot/message/push".to_string(),
        );
        if let Some(param_value) = x_line_retry_key {
            req = req.with_header_param("X-Line-Retry-Key".to_string(), param_value.to_string());
        }
        req = req.with_body_param(push_message_request);

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn push_messages_by_phone(
        &self,
        pnp_messages_request: crate::models::PnpMessagesRequest,
        x_line_delivery_tag: Option<&str>,
    ) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req =
            __internal_request::Request::new(hyper::Method::POST, "/bot/pnp/push".to_string());
        if let Some(param_value) = x_line_delivery_tag {
            req = req.with_header_param("X-Line-Delivery-Tag".to_string(), param_value.to_string());
        }
        req = req.with_body_param(pnp_messages_request);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn reply_message(
        &self,
        reply_message_request: crate::models::ReplyMessageRequest,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::ReplyMessageResponse, Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::POST,
            "/v2/bot/message/reply".to_string(),
        );
        req = req.with_body_param(reply_message_request);

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn rich_menu_batch(
        &self,
        rich_menu_batch_request: crate::models::RichMenuBatchRequest,
    ) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::POST,
            "/v2/bot/richmenu/batch".to_string(),
        );
        req = req.with_body_param(rich_menu_batch_request);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn set_default_rich_menu(
        &self,
        rich_menu_id: &str,
    ) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::POST,
            "/v2/bot/user/all/richmenu/{richMenuId}".to_string(),
        );
        req = req.with_path_param("richMenuId".to_string(), rich_menu_id.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn set_webhook_endpoint(
        &self,
        set_webhook_endpoint_request: crate::models::SetWebhookEndpointRequest,
    ) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::PUT,
            "/v2/bot/channel/webhook/endpoint".to_string(),
        );
        req = req.with_body_param(set_webhook_endpoint_request);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn test_webhook_endpoint(
        &self,
        test_webhook_endpoint_request: Option<crate::models::TestWebhookEndpointRequest>,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::TestWebhookEndpointResponse, Error>>>>
    {
        let mut req = __internal_request::Request::new(
            hyper::Method::POST,
            "/v2/bot/channel/webhook/test".to_string(),
        );
        req = req.with_body_param(test_webhook_endpoint_request);

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn unlink_rich_menu_id_from_user(
        &self,
        user_id: &str,
    ) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::DELETE,
            "/v2/bot/user/{userId}/richmenu".to_string(),
        );
        req = req.with_path_param("userId".to_string(), user_id.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn unlink_rich_menu_id_from_users(
        &self,
        rich_menu_bulk_unlink_request: crate::models::RichMenuBulkUnlinkRequest,
    ) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::POST,
            "/v2/bot/richmenu/bulk/unlink".to_string(),
        );
        req = req.with_body_param(rich_menu_bulk_unlink_request);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn update_rich_menu_alias(
        &self,
        rich_menu_alias_id: &str,
        update_rich_menu_alias_request: crate::models::UpdateRichMenuAliasRequest,
    ) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::POST,
            "/v2/bot/richmenu/alias/{richMenuAliasId}".to_string(),
        );
        req = req.with_path_param(
            "richMenuAliasId".to_string(),
            rich_menu_alias_id.to_string(),
        );
        req = req.with_body_param(update_rich_menu_alias_request);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn validate_broadcast(
        &self,
        validate_message_request: crate::models::ValidateMessageRequest,
    ) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::POST,
            "/v2/bot/message/validate/broadcast".to_string(),
        );
        req = req.with_body_param(validate_message_request);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn validate_multicast(
        &self,
        validate_message_request: crate::models::ValidateMessageRequest,
    ) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::POST,
            "/v2/bot/message/validate/multicast".to_string(),
        );
        req = req.with_body_param(validate_message_request);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn validate_narrowcast(
        &self,
        validate_message_request: crate::models::ValidateMessageRequest,
    ) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::POST,
            "/v2/bot/message/validate/narrowcast".to_string(),
        );
        req = req.with_body_param(validate_message_request);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn validate_push(
        &self,
        validate_message_request: crate::models::ValidateMessageRequest,
    ) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::POST,
            "/v2/bot/message/validate/push".to_string(),
        );
        req = req.with_body_param(validate_message_request);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn validate_reply(
        &self,
        validate_message_request: crate::models::ValidateMessageRequest,
    ) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::POST,
            "/v2/bot/message/validate/reply".to_string(),
        );
        req = req.with_body_param(validate_message_request);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn validate_rich_menu_batch_request(
        &self,
        rich_menu_batch_request: crate::models::RichMenuBatchRequest,
    ) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::POST,
            "/v2/bot/richmenu/validate/batch".to_string(),
        );
        req = req.with_body_param(rich_menu_batch_request);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn validate_rich_menu_object(
        &self,
        rich_menu_request: crate::models::RichMenuRequest,
    ) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::POST,
            "/v2/bot/richmenu/validate".to_string(),
        );
        req = req.with_body_param(rich_menu_request);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }
}
