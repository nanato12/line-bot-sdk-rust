/*
* Copyright (C) 2016 LINE Corp.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/*
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.2
 *
 * Generated by: https://openapi-generator.tech
 */

/// FlexBoxPadding : Padding can be specified in pixels, percentage (to the parent box width) or with a keyword. FlexBoxPadding just provides only keywords.

/// Padding can be specified in pixels, percentage (to the parent box width) or with a keyword. FlexBoxPadding just provides only keywords.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum FlexBoxPadding {
    #[serde(rename = "none")]
    None,
    #[serde(rename = "xs")]
    Xs,
    #[serde(rename = "sm")]
    Sm,
    #[serde(rename = "md")]
    Md,
    #[serde(rename = "lg")]
    Lg,
    #[serde(rename = "xl")]
    Xl,
    #[serde(rename = "xxl")]
    Xxl,
}

impl ToString for FlexBoxPadding {
    fn to_string(&self) -> String {
        match self {
            Self::None => String::from("none"),
            Self::Xs => String::from("xs"),
            Self::Sm => String::from("sm"),
            Self::Md => String::from("md"),
            Self::Lg => String::from("lg"),
            Self::Xl => String::from("xl"),
            Self::Xxl => String::from("xxl"),
        }
    }
}

impl Default for FlexBoxPadding {
    fn default() -> FlexBoxPadding {
        Self::None
    }
}
