/*
* Copyright (C) 2016 LINE Corp.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/*
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.2
 *
 * Generated by: https://openapi-generator.tech
 */

/// TemplateImageSize : Size of the image.  This is only for the `imageSize` in ButtonsTemplate. Specify one of the following values:  `cover`: The image fills the entire image area. Parts of the image that do not fit in the area are not displayed. `contain`: The entire image is displayed in the image area. A background is displayed in the unused areas to the left and right of vertical images and in the areas above and below horizontal images.

/// Size of the image.  This is only for the `imageSize` in ButtonsTemplate. Specify one of the following values:  `cover`: The image fills the entire image area. Parts of the image that do not fit in the area are not displayed. `contain`: The entire image is displayed in the image area. A background is displayed in the unused areas to the left and right of vertical images and in the areas above and below horizontal images.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TemplateImageSize {
    #[serde(rename = "cover")]
    Cover,
    #[serde(rename = "contain")]
    Contain,
}

impl ToString for TemplateImageSize {
    fn to_string(&self) -> String {
        match self {
            Self::Cover => String::from("cover"),
            Self::Contain => String::from("contain"),
        }
    }
}

impl Default for TemplateImageSize {
    fn default() -> TemplateImageSize {
        Self::Cover
    }
}
