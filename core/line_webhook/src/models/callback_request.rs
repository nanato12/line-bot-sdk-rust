/*
* Copyright (C) 2016 LINE Corp.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/*
 * Webhook Type Definition
 *
 * Webhook event definition of the LINE Messaging API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

/// CallbackRequest : The request body contains a JSON object with the user ID of a bot that should receive webhook events and an array of webhook event objects.

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CallbackRequest {
    /// User ID of a bot that should receive webhook events. The user ID value is a string that matches the regular expression, `U[0-9a-f]{32}`.
    #[serde(rename = "destination")]
    pub destination: String,
    /// Array of webhook event objects. The LINE Platform may send an empty array that doesn't include a webhook event object to confirm communication.
    #[serde(rename = "events")]
    pub events: Vec<crate::models::Event>,
}

impl CallbackRequest {
    /// The request body contains a JSON object with the user ID of a bot that should receive webhook events and an array of webhook event objects.
    pub fn new(destination: String, events: Vec<crate::models::Event>) -> CallbackRequest {
        CallbackRequest {
            destination,
            events,
        }
    }
}
