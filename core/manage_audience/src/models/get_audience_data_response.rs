/*
* Copyright (C) 2016 LINE Corp.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/*
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * Generated by: https://openapi-generator.tech
 */

/// GetAudienceDataResponse : Get audience data

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetAudienceDataResponse {
    #[serde(rename = "audienceGroup", skip_serializing_if = "Option::is_none")]
    pub audience_group: Option<Box<crate::models::AudienceGroup>>,
    /// An array of jobs. This array is used to keep track of each attempt to add new user IDs or IFAs to an audience for uploading user IDs. Empty array is returned for any other type of audience. Max: 50
    #[serde(rename = "jobs", skip_serializing_if = "Option::is_none")]
    pub jobs: Option<Vec<crate::models::AudienceGroupJob>>,
}

impl GetAudienceDataResponse {
    /// Get audience data
    pub fn new() -> GetAudienceDataResponse {
        GetAudienceDataResponse {
            audience_group: None,
            jobs: None,
        }
    }
}
