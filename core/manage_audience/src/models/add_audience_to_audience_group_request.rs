/*
* Copyright 2023 nanato12
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/*
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * Generated by: https://openapi-generator.tech
 */

/// AddAudienceToAudienceGroupRequest : Add user IDs or Identifiers for Advertisers (IFAs) to an audience for uploading user IDs (by JSON)

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AddAudienceToAudienceGroupRequest {
    /// The audience ID.
    #[serde(rename = "audienceGroupId", skip_serializing_if = "Option::is_none")]
    pub audience_group_id: Option<i64>,
    /// The audience's name.
    #[serde(rename = "uploadDescription", skip_serializing_if = "Option::is_none")]
    pub upload_description: Option<String>,
    /// An array of up to 10,000 user IDs or IFAs.
    #[serde(rename = "audiences", skip_serializing_if = "Option::is_none")]
    pub audiences: Option<Vec<crate::models::Audience>>,
}

impl AddAudienceToAudienceGroupRequest {
    /// Add user IDs or Identifiers for Advertisers (IFAs) to an audience for uploading user IDs (by JSON)
    pub fn new() -> AddAudienceToAudienceGroupRequest {
        AddAudienceToAudienceGroupRequest {
            audience_group_id: None,
            upload_description: None,
            audiences: None,
        }
    }
}
