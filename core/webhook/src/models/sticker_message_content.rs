/*
* Copyright 2023 nanato12
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/*
 * Webhook Type Definition
 *
 * Webhook event definition of the LINE Messaging API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct StickerMessageContent {
    /// Type
    #[serde(rename = "type")]
    pub r#type: String,
    /// Message ID
    #[serde(rename = "id")]
    pub id: String,
    /// Package ID
    #[serde(rename = "packageId")]
    pub package_id: String,
    /// Sticker ID
    #[serde(rename = "stickerId")]
    pub sticker_id: String,
    #[serde(rename = "stickerResourceType")]
    pub sticker_resource_type: StickerResourceType,
    /// Array of up to 15 keywords describing the sticker. If a sticker has 16 or more keywords, a random selection of 15 keywords will be returned. The keyword selection is random for each event, so different keywords may be returned for the same sticker.
    #[serde(rename = "keywords", skip_serializing_if = "Option::is_none")]
    pub keywords: Option<Vec<String>>,
    /// Any text entered by the user. This property is only included for message stickers. Max character limit: 100
    #[serde(rename = "text", skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
    /// Quote token to quote this message.
    #[serde(rename = "quoteToken")]
    pub quote_token: String,
    /// Message ID of a quoted message. Only included when the received message quotes a past message.  
    #[serde(rename = "quotedMessageId", skip_serializing_if = "Option::is_none")]
    pub quoted_message_id: Option<String>,
}

impl StickerMessageContent {
    pub fn new(
        r#type: String,
        id: String,
        package_id: String,
        sticker_id: String,
        sticker_resource_type: StickerResourceType,
        quote_token: String,
    ) -> StickerMessageContent {
        StickerMessageContent {
            r#type,
            id,
            package_id,
            sticker_id,
            sticker_resource_type,
            keywords: None,
            text: None,
            quote_token,
            quoted_message_id: None,
        }
    }
}

///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum StickerResourceType {
    #[serde(rename = "STATIC")]
    Static,
    #[serde(rename = "ANIMATION")]
    Animation,
    #[serde(rename = "SOUND")]
    Sound,
    #[serde(rename = "ANIMATION_SOUND")]
    AnimationSound,
    #[serde(rename = "POPUP")]
    Popup,
    #[serde(rename = "POPUP_SOUND")]
    PopupSound,
    #[serde(rename = "CUSTOM")]
    Custom,
    #[serde(rename = "MESSAGE")]
    Message,
    #[serde(rename = "NAME_TEXT")]
    NameText,
    #[serde(rename = "PER_STICKER_TEXT")]
    PerStickerText,
}

impl Default for StickerResourceType {
    fn default() -> StickerResourceType {
        Self::Static
    }
}
