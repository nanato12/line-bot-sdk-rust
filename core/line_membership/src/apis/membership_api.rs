/*
* Copyright (C) 2016 LINE Corp.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/*
 * Membership API
 *
 * This document describes LINE Official Account Membership API.
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * Generated by: https://openapi-generator.tech
 */

use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;
use std::pin::Pin;
use std::rc::Rc;

use futures::Future;
use hyper;

use super::request as __internal_request;
use super::{configuration, Error};

pub struct MembershipApiClient<C: hyper::client::connect::Connect>
where
    C: Clone + std::marker::Send + Sync + 'static,
{
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::connect::Connect> MembershipApiClient<C>
where
    C: Clone + std::marker::Send + Sync,
{
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> MembershipApiClient<C> {
        MembershipApiClient { configuration }
    }
}

pub trait MembershipApi {
    fn get_membership_list(
        &self,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::MembershipListResponse, Error>>>>;
    fn get_membership_subscription(
        &self,
        user_id: &str,
    ) -> Pin<
        Box<dyn Future<Output = Result<crate::models::GetMembershipSubscriptionResponse, Error>>>,
    >;
}

impl<C: hyper::client::connect::Connect> MembershipApi for MembershipApiClient<C>
where
    C: Clone + std::marker::Send + Sync,
{
    #[allow(unused_mut)]
    fn get_membership_list(
        &self,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::MembershipListResponse, Error>>>> {
        let mut req =
            __internal_request::Request::new(hyper::Method::GET, "/membership/v1/list".to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_membership_subscription(
        &self,
        user_id: &str,
    ) -> Pin<
        Box<dyn Future<Output = Result<crate::models::GetMembershipSubscriptionResponse, Error>>>,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::GET,
            "/membership/v1/subscription/{userId}".to_string(),
        );
        req = req.with_path_param("userId".to_string(), user_id.to_string());

        req.execute(self.configuration.borrow())
    }
}
