/*
* Copyright (C) 2016 LINE Corp.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/*
 * Membership API
 *
 * This document describes LINE Official Account Membership API.
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * Generated by: https://openapi-generator.tech
 */

/// MembershipMeta : Object containing information about the membership plan.

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MembershipMeta {
    /// Membership plan ID.
    #[serde(rename = "membershipId")]
    pub membership_id: i32,
    /// Membership plan name.
    #[serde(rename = "title")]
    pub title: String,
    /// Membership plan description.
    #[serde(rename = "description")]
    pub description: String,
    /// List of membership plan perks.
    #[serde(rename = "benefits")]
    pub benefits: Vec<String>,
    /// Monthly fee for membership plan. (e.g. 1500.00)
    #[serde(rename = "price")]
    pub price: f64,
    /// The currency of membership.price.
    #[serde(rename = "currency")]
    pub currency: Currency,
}

impl MembershipMeta {
    /// Object containing information about the membership plan.
    pub fn new(
        membership_id: i32,
        title: String,
        description: String,
        benefits: Vec<String>,
        price: f64,
        currency: Currency,
    ) -> MembershipMeta {
        MembershipMeta {
            membership_id,
            title,
            description,
            benefits,
            price,
            currency,
        }
    }
}

/// The currency of membership.price.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Currency {
    #[serde(rename = "JPY")]
    Jpy,
    #[serde(rename = "TWD")]
    Twd,
    #[serde(rename = "THB")]
    Thb,
}

impl Default for Currency {
    fn default() -> Currency {
        Self::Jpy
    }
}
