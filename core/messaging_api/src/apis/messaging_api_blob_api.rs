/*
* Copyright 2023 nanato12
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/*
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * Generated by: https://openapi-generator.tech
 */

use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;
use std::pin::Pin;
use std::rc::Rc;

use futures::Future;
use hyper;

use super::request as __internal_request;
use super::{configuration, Error};

pub struct MessagingApiBlobApiClient<C: hyper::client::connect::Connect>
where
    C: Clone + std::marker::Send + Sync + 'static,
{
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::connect::Connect> MessagingApiBlobApiClient<C>
where
    C: Clone + std::marker::Send + Sync,
{
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> MessagingApiBlobApiClient<C> {
        MessagingApiBlobApiClient { configuration }
    }
}

pub trait MessagingApiBlobApi {
    fn get_message_content(
        &self,
        message_id: &str,
    ) -> Pin<Box<dyn Future<Output = Result<std::path::PathBuf, Error>>>>;
    fn get_message_content_preview(
        &self,
        message_id: &str,
    ) -> Pin<Box<dyn Future<Output = Result<std::path::PathBuf, Error>>>>;
    fn get_message_content_transcoding_by_message_id(
        &self,
        message_id: &str,
    ) -> Pin<
        Box<
            dyn Future<Output = Result<crate::models::GetMessageContentTranscodingResponse, Error>>,
        >,
    >;
    fn get_rich_menu_image(
        &self,
        rich_menu_id: &str,
    ) -> Pin<Box<dyn Future<Output = Result<std::path::PathBuf, Error>>>>;
    fn set_rich_menu_image(
        &self,
        rich_menu_id: &str,
        body: Option<std::path::PathBuf>,
    ) -> Pin<Box<dyn Future<Output = Result<(), Error>>>>;
}

impl<C: hyper::client::connect::Connect> MessagingApiBlobApi for MessagingApiBlobApiClient<C>
where
    C: Clone + std::marker::Send + Sync,
{
    #[allow(unused_mut)]
    fn get_message_content(
        &self,
        message_id: &str,
    ) -> Pin<Box<dyn Future<Output = Result<std::path::PathBuf, Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::GET,
            "/v2/bot/message/{messageId}/content".to_string(),
        );
        req = req.with_path_param("messageId".to_string(), message_id.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_message_content_preview(
        &self,
        message_id: &str,
    ) -> Pin<Box<dyn Future<Output = Result<std::path::PathBuf, Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::GET,
            "/v2/bot/message/{messageId}/content/preview".to_string(),
        );
        req = req.with_path_param("messageId".to_string(), message_id.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_message_content_transcoding_by_message_id(
        &self,
        message_id: &str,
    ) -> Pin<
        Box<
            dyn Future<Output = Result<crate::models::GetMessageContentTranscodingResponse, Error>>,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::GET,
            "/v2/bot/message/{messageId}/content/transcoding".to_string(),
        );
        req = req.with_path_param("messageId".to_string(), message_id.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_rich_menu_image(
        &self,
        rich_menu_id: &str,
    ) -> Pin<Box<dyn Future<Output = Result<std::path::PathBuf, Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::GET,
            "/v2/bot/richmenu/{richMenuId}/content".to_string(),
        );
        req = req.with_path_param("richMenuId".to_string(), rich_menu_id.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn set_rich_menu_image(
        &self,
        rich_menu_id: &str,
        body: Option<std::path::PathBuf>,
    ) -> Pin<Box<dyn Future<Output = Result<(), Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::POST,
            "/v2/bot/richmenu/{richMenuId}/content".to_string(),
        );
        req = req.with_path_param("richMenuId".to_string(), rich_menu_id.to_string());
        req = req.with_body_param(body);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }
}
