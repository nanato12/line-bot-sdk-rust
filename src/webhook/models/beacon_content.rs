/*
* Copyright 2023 nanato12
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/*
 * Webhook Type Definition
 *
 * Webhook event definition of the LINE Messaging API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BeaconContent {
    /// Hardware ID of the beacon that was detected
    #[serde(rename = "hwid")]
    pub hwid: String,
    /// Type of beacon event.
    #[serde(rename = "type")]
    pub r#type: Type,
    /// Device message of beacon that was detected.
    #[serde(rename = "dm", skip_serializing_if = "Option::is_none")]
    pub dm: Option<String>,
}

impl BeaconContent {
    pub fn new(hwid: String, r#type: Type) -> BeaconContent {
        BeaconContent {
            hwid,
            r#type,
            dm: None,
        }
    }
}

/// Type of beacon event.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "enter")]
    Enter,
    #[serde(rename = "banner")]
    Banner,
    #[serde(rename = "stay")]
    Stay,
}

impl Default for Type {
    fn default() -> Type {
        Self::Enter
    }
}
