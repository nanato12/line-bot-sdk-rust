/*
* Copyright 2023 nanato12
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/*
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * Generated by: https://openapi-generator.tech
 */

use reqwest;

use super::{configuration, Error};
use crate::manage_audience::apis::ResponseContent;

/// struct for passing parameters to the method [`activate_audience_group`]
#[derive(Clone, Debug)]
pub struct ActivateAudienceGroupParams {
    /// The audience ID.
    pub audience_group_id: i64,
}

/// struct for passing parameters to the method [`add_audience_to_audience_group`]
#[derive(Clone, Debug)]
pub struct AddAudienceToAudienceGroupParams {
    pub add_audience_to_audience_group_request:
        crate::manage_audience::models::AddAudienceToAudienceGroupRequest,
}

/// struct for passing parameters to the method [`create_audience_group`]
#[derive(Clone, Debug)]
pub struct CreateAudienceGroupParams {
    pub create_audience_group_request: crate::manage_audience::models::CreateAudienceGroupRequest,
}

/// struct for passing parameters to the method [`create_click_based_audience_group`]
#[derive(Clone, Debug)]
pub struct CreateClickBasedAudienceGroupParams {
    pub create_click_based_audience_group_request:
        crate::manage_audience::models::CreateClickBasedAudienceGroupRequest,
}

/// struct for passing parameters to the method [`create_imp_based_audience_group`]
#[derive(Clone, Debug)]
pub struct CreateImpBasedAudienceGroupParams {
    pub create_imp_based_audience_group_request:
        crate::manage_audience::models::CreateImpBasedAudienceGroupRequest,
}

/// struct for passing parameters to the method [`delete_audience_group`]
#[derive(Clone, Debug)]
pub struct DeleteAudienceGroupParams {
    /// The audience ID.
    pub audience_group_id: i64,
}

/// struct for passing parameters to the method [`get_audience_data`]
#[derive(Clone, Debug)]
pub struct GetAudienceDataParams {
    /// The audience ID.
    pub audience_group_id: i64,
}

/// struct for passing parameters to the method [`get_audience_groups`]
#[derive(Clone, Debug)]
pub struct GetAudienceGroupsParams {
    /// The page to return when getting (paginated) results. Must be 1 or higher.
    pub page: i64,
    /// The name of the audience(s) to return. You can search for partial matches. This is case-insensitive, meaning AUDIENCE and audience are considered identical. If omitted, the name of the audience(s) will not be used as a search criterion.
    pub description: Option<String>,
    /// The status of the audience(s) to return. If omitted, the status of the audience(s) will not be used as a search criterion.
    pub status: Option<crate::manage_audience::models::AudienceGroupStatus>,
    /// The number of audiences per page. Default: 20 Max: 40
    pub size: Option<i64>,
    /// true (default): Get public audiences created in all channels linked to the same bot. false: Get audiences created in the same channel.
    pub includes_external_public_groups: Option<bool>,
    /// How the audience was created. If omitted, all audiences are included.  `OA_MANAGER`: Return only audiences created with LINE Official Account Manager (opens new window). `MESSAGING_API`: Return only audiences created with Messaging API.
    pub create_route: Option<crate::manage_audience::models::AudienceGroupCreateRoute>,
}

/// struct for passing parameters to the method [`update_audience_group_authority_level`]
#[derive(Clone, Debug)]
pub struct UpdateAudienceGroupAuthorityLevelParams {
    pub update_audience_group_authority_level_request:
        crate::manage_audience::models::UpdateAudienceGroupAuthorityLevelRequest,
}

/// struct for passing parameters to the method [`update_audience_group_description`]
#[derive(Clone, Debug)]
pub struct UpdateAudienceGroupDescriptionParams {
    /// The audience ID.
    pub audience_group_id: i64,
    pub update_audience_group_description_request:
        crate::manage_audience::models::UpdateAudienceGroupDescriptionRequest,
}

/// struct for typed successes of method [`activate_audience_group`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActivateAudienceGroupSuccess {
    Status202(),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`add_audience_to_audience_group`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AddAudienceToAudienceGroupSuccess {
    Status200(),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`create_audience_group`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateAudienceGroupSuccess {
    Status200(crate::manage_audience::models::CreateAudienceGroupResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`create_click_based_audience_group`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateClickBasedAudienceGroupSuccess {
    Status200(crate::manage_audience::models::CreateClickBasedAudienceGroupResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`create_imp_based_audience_group`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateImpBasedAudienceGroupSuccess {
    Status200(crate::manage_audience::models::CreateImpBasedAudienceGroupResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`delete_audience_group`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteAudienceGroupSuccess {
    Status200(),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_audience_data`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAudienceDataSuccess {
    Status200(crate::manage_audience::models::GetAudienceDataResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_audience_group_authority_level`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAudienceGroupAuthorityLevelSuccess {
    Status200(crate::manage_audience::models::GetAudienceGroupAuthorityLevelResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_audience_groups`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAudienceGroupsSuccess {
    Status200(crate::manage_audience::models::GetAudienceGroupsResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`update_audience_group_authority_level`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateAudienceGroupAuthorityLevelSuccess {
    Status200(),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`update_audience_group_description`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateAudienceGroupDescriptionSuccess {
    Status200(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`activate_audience_group`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActivateAudienceGroupError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`add_audience_to_audience_group`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AddAudienceToAudienceGroupError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_audience_group`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateAudienceGroupError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_click_based_audience_group`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateClickBasedAudienceGroupError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_imp_based_audience_group`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateImpBasedAudienceGroupError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_audience_group`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteAudienceGroupError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_audience_data`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAudienceDataError {
    Status400(crate::manage_audience::models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_audience_group_authority_level`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAudienceGroupAuthorityLevelError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_audience_groups`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAudienceGroupsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_audience_group_authority_level`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateAudienceGroupAuthorityLevelError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_audience_group_description`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateAudienceGroupDescriptionError {
    UnknownValue(serde_json::Value),
}

/// Activate audience
pub async fn activate_audience_group(
    configuration: &configuration::Configuration,
    params: ActivateAudienceGroupParams,
) -> Result<ResponseContent<ActivateAudienceGroupSuccess>, Error<ActivateAudienceGroupError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let audience_group_id = params.audience_group_id;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v2/bot/audienceGroup/{audienceGroupId}/activate",
        local_var_configuration.base_path,
        audienceGroupId = audience_group_id
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<ActivateAudienceGroupSuccess> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<ActivateAudienceGroupError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Add user IDs or Identifiers for Advertisers (IFAs) to an audience for uploading user IDs (by JSON)
pub async fn add_audience_to_audience_group(
    configuration: &configuration::Configuration,
    params: AddAudienceToAudienceGroupParams,
) -> Result<
    ResponseContent<AddAudienceToAudienceGroupSuccess>,
    Error<AddAudienceToAudienceGroupError>,
> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let add_audience_to_audience_group_request = params.add_audience_to_audience_group_request;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v2/bot/audienceGroup/upload",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&add_audience_to_audience_group_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<AddAudienceToAudienceGroupSuccess> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<AddAudienceToAudienceGroupError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Create audience for uploading user IDs (by JSON)
pub async fn create_audience_group(
    configuration: &configuration::Configuration,
    params: CreateAudienceGroupParams,
) -> Result<ResponseContent<CreateAudienceGroupSuccess>, Error<CreateAudienceGroupError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let create_audience_group_request = params.create_audience_group_request;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v2/bot/audienceGroup/upload",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&create_audience_group_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<CreateAudienceGroupSuccess> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<CreateAudienceGroupError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Create audience for click-based retargeting
pub async fn create_click_based_audience_group(
    configuration: &configuration::Configuration,
    params: CreateClickBasedAudienceGroupParams,
) -> Result<
    ResponseContent<CreateClickBasedAudienceGroupSuccess>,
    Error<CreateClickBasedAudienceGroupError>,
> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let create_click_based_audience_group_request =
        params.create_click_based_audience_group_request;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v2/bot/audienceGroup/click",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&create_click_based_audience_group_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<CreateClickBasedAudienceGroupSuccess> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<CreateClickBasedAudienceGroupError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Create audience for impression-based retargeting
pub async fn create_imp_based_audience_group(
    configuration: &configuration::Configuration,
    params: CreateImpBasedAudienceGroupParams,
) -> Result<
    ResponseContent<CreateImpBasedAudienceGroupSuccess>,
    Error<CreateImpBasedAudienceGroupError>,
> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let create_imp_based_audience_group_request = params.create_imp_based_audience_group_request;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v2/bot/audienceGroup/imp",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&create_imp_based_audience_group_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<CreateImpBasedAudienceGroupSuccess> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<CreateImpBasedAudienceGroupError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Delete audience
pub async fn delete_audience_group(
    configuration: &configuration::Configuration,
    params: DeleteAudienceGroupParams,
) -> Result<ResponseContent<DeleteAudienceGroupSuccess>, Error<DeleteAudienceGroupError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let audience_group_id = params.audience_group_id;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v2/bot/audienceGroup/{audienceGroupId}",
        local_var_configuration.base_path,
        audienceGroupId = audience_group_id
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<DeleteAudienceGroupSuccess> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<DeleteAudienceGroupError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Gets audience data.
pub async fn get_audience_data(
    configuration: &configuration::Configuration,
    params: GetAudienceDataParams,
) -> Result<ResponseContent<GetAudienceDataSuccess>, Error<GetAudienceDataError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let audience_group_id = params.audience_group_id;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v2/bot/audienceGroup/{audienceGroupId}",
        local_var_configuration.base_path,
        audienceGroupId = audience_group_id
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetAudienceDataSuccess> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetAudienceDataError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get the authority level of the audience
pub async fn get_audience_group_authority_level(
    configuration: &configuration::Configuration,
) -> Result<
    ResponseContent<GetAudienceGroupAuthorityLevelSuccess>,
    Error<GetAudienceGroupAuthorityLevelError>,
> {
    let local_var_configuration = configuration;

    // unbox the parameters

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v2/bot/audienceGroup/authorityLevel",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetAudienceGroupAuthorityLevelSuccess> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetAudienceGroupAuthorityLevelError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Gets data for more than one audience.
pub async fn get_audience_groups(
    configuration: &configuration::Configuration,
    params: GetAudienceGroupsParams,
) -> Result<ResponseContent<GetAudienceGroupsSuccess>, Error<GetAudienceGroupsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let page = params.page;
    let description = params.description;
    let status = params.status;
    let size = params.size;
    let includes_external_public_groups = params.includes_external_public_groups;
    let create_route = params.create_route;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v2/bot/audienceGroup/list",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("page", &page.to_string())]);
    if let Some(ref local_var_str) = description {
        local_var_req_builder =
            local_var_req_builder.query(&[("description", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = status {
        local_var_req_builder =
            local_var_req_builder.query(&[("status", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = size {
        local_var_req_builder =
            local_var_req_builder.query(&[("size", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = includes_external_public_groups {
        local_var_req_builder = local_var_req_builder
            .query(&[("includesExternalPublicGroups", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = create_route {
        local_var_req_builder =
            local_var_req_builder.query(&[("createRoute", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetAudienceGroupsSuccess> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetAudienceGroupsError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Change the authority level of the audience
pub async fn update_audience_group_authority_level(
    configuration: &configuration::Configuration,
    params: UpdateAudienceGroupAuthorityLevelParams,
) -> Result<
    ResponseContent<UpdateAudienceGroupAuthorityLevelSuccess>,
    Error<UpdateAudienceGroupAuthorityLevelError>,
> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let update_audience_group_authority_level_request =
        params.update_audience_group_authority_level_request;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v2/bot/audienceGroup/authorityLevel",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder =
        local_var_req_builder.json(&update_audience_group_authority_level_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<UpdateAudienceGroupAuthorityLevelSuccess> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<UpdateAudienceGroupAuthorityLevelError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Renames an existing audience.
pub async fn update_audience_group_description(
    configuration: &configuration::Configuration,
    params: UpdateAudienceGroupDescriptionParams,
) -> Result<
    ResponseContent<UpdateAudienceGroupDescriptionSuccess>,
    Error<UpdateAudienceGroupDescriptionError>,
> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let audience_group_id = params.audience_group_id;
    let update_audience_group_description_request =
        params.update_audience_group_description_request;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v2/bot/audienceGroup/{audienceGroupId}/updateDescription",
        local_var_configuration.base_path,
        audienceGroupId = audience_group_id
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&update_audience_group_description_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<UpdateAudienceGroupDescriptionSuccess> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<UpdateAudienceGroupDescriptionError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}
