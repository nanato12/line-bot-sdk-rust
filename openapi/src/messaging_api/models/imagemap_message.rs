/*
* Copyright 2023 nanato12
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/*
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ImagemapMessage {
    /// Type of message
    #[serde(rename = "type")]
    pub r#type: String,
    #[serde(rename = "quickReply", skip_serializing_if = "Option::is_none")]
    pub quick_reply: Option<Box<crate::messaging_api::models::QuickReply>>,
    #[serde(rename = "sender", skip_serializing_if = "Option::is_none")]
    pub sender: Option<Box<crate::messaging_api::models::Sender>>,
    #[serde(rename = "baseUrl")]
    pub base_url: String,
    #[serde(rename = "altText")]
    pub alt_text: String,
    #[serde(rename = "baseSize")]
    pub base_size: Box<crate::messaging_api::models::ImagemapBaseSize>,
    #[serde(rename = "actions")]
    pub actions: Vec<crate::messaging_api::models::ImagemapAction>,
    #[serde(rename = "video", skip_serializing_if = "Option::is_none")]
    pub video: Option<Box<crate::messaging_api::models::ImagemapVideo>>,
}

impl ImagemapMessage {
    pub fn new(r#type: String, base_url: String, alt_text: String, base_size: crate::messaging_api::models::ImagemapBaseSize, actions: Vec<crate::messaging_api::models::ImagemapAction>) -> ImagemapMessage {
        ImagemapMessage {
            r#type,
            quick_reply: None,
            sender: None,
            base_url,
            alt_text,
            base_size: Box::new(base_size),
            actions,
            video: None,
        }
    }
}


