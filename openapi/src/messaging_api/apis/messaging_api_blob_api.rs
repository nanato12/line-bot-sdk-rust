/*
* Copyright 2023 nanato12
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/*
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * Generated by: https://openapi-generator.tech
 */

use reqwest;

use super::{configuration, Error};
use crate::messaging_api::apis::ResponseContent;

/// struct for passing parameters to the method [`get_message_content`]
#[derive(Clone, Debug)]
pub struct GetMessageContentParams {
    /// Message ID of video or audio
    pub message_id: String,
}

/// struct for passing parameters to the method [`get_message_content_preview`]
#[derive(Clone, Debug)]
pub struct GetMessageContentPreviewParams {
    /// Message ID of image or video
    pub message_id: String,
}

/// struct for passing parameters to the method [`get_message_content_transcoding_by_message_id`]
#[derive(Clone, Debug)]
pub struct GetMessageContentTranscodingByMessageIdParams {
    /// Message ID of video or audio
    pub message_id: String,
}

/// struct for passing parameters to the method [`get_rich_menu_image`]
#[derive(Clone, Debug)]
pub struct GetRichMenuImageParams {
    /// ID of the rich menu with the image to be downloaded
    pub rich_menu_id: String,
}

/// struct for passing parameters to the method [`set_rich_menu_image`]
#[derive(Clone, Debug)]
pub struct SetRichMenuImageParams {
    /// The ID of the rich menu to attach the image to
    pub rich_menu_id: String,
    pub body: Option<std::path::PathBuf>,
}

/// struct for typed errors of method [`get_message_content`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetMessageContentError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_message_content_preview`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetMessageContentPreviewError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_message_content_transcoding_by_message_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetMessageContentTranscodingByMessageIdError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_rich_menu_image`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetRichMenuImageError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`set_rich_menu_image`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SetRichMenuImageError {
    UnknownValue(serde_json::Value),
}

/// Download image, video, and audio data sent from users.
pub async fn get_message_content(
    configuration: &configuration::Configuration,
    params: GetMessageContentParams,
) -> Result<std::path::PathBuf, Error<GetMessageContentError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let message_id = params.message_id;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v2/bot/message/{messageId}/content",
        local_var_configuration.base_path,
        messageId = crate::messaging_api::apis::urlencode(message_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetMessageContentError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get a preview image of the image or video
pub async fn get_message_content_preview(
    configuration: &configuration::Configuration,
    params: GetMessageContentPreviewParams,
) -> Result<std::path::PathBuf, Error<GetMessageContentPreviewError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let message_id = params.message_id;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v2/bot/message/{messageId}/content/preview",
        local_var_configuration.base_path,
        messageId = crate::messaging_api::apis::urlencode(message_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetMessageContentPreviewError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Verify the preparation status of a video or audio for getting
pub async fn get_message_content_transcoding_by_message_id(
    configuration: &configuration::Configuration,
    params: GetMessageContentTranscodingByMessageIdParams,
) -> Result<
    crate::messaging_api::models::GetMessageContentTranscodingResponse,
    Error<GetMessageContentTranscodingByMessageIdError>,
> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let message_id = params.message_id;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v2/bot/message/{messageId}/content/transcoding",
        local_var_configuration.base_path,
        messageId = crate::messaging_api::apis::urlencode(message_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetMessageContentTranscodingByMessageIdError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Download rich menu image.
pub async fn get_rich_menu_image(
    configuration: &configuration::Configuration,
    params: GetRichMenuImageParams,
) -> Result<std::path::PathBuf, Error<GetRichMenuImageError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let rich_menu_id = params.rich_menu_id;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v2/bot/richmenu/{richMenuId}/content",
        local_var_configuration.base_path,
        richMenuId = crate::messaging_api::apis::urlencode(rich_menu_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetRichMenuImageError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Upload rich menu image
pub async fn set_rich_menu_image(
    configuration: &configuration::Configuration,
    params: SetRichMenuImageParams,
) -> Result<(), Error<SetRichMenuImageError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let rich_menu_id = params.rich_menu_id;
    let body = params.body;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v2/bot/richmenu/{richMenuId}/content",
        local_var_configuration.base_path,
        richMenuId = crate::messaging_api::apis::urlencode(rich_menu_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<SetRichMenuImageError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}
