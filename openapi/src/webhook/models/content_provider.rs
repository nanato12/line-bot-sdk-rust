/*
* Copyright 2023 nanato12
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/*
 * Webhook Type Definition
 *
 * Webhook event definition of the LINE Messaging API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

/// ContentProvider : Provider of the media file.

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ContentProvider {
    /// Provider of the image file.
    #[serde(rename = "type")]
    pub r#type: Type,
    /// URL of the image file. Only included when contentProvider.type is external.
    #[serde(rename = "originalContentUrl", skip_serializing_if = "Option::is_none")]
    pub original_content_url: Option<String>,
    /// URL of the preview image. Only included when contentProvider.type is external.
    #[serde(rename = "previewImageUrl", skip_serializing_if = "Option::is_none")]
    pub preview_image_url: Option<String>,
}

impl ContentProvider {
    /// Provider of the media file.
    pub fn new(r#type: Type) -> ContentProvider {
        ContentProvider {
            r#type,
            original_content_url: None,
            preview_image_url: None,
        }
    }
}

/// Provider of the image file.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "line")]
    Line,
    #[serde(rename = "external")]
    External,
}

impl Default for Type {
    fn default() -> Type {
        Self::Line
    }
}
